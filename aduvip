
local Client = require(game.ReplicatedStorage.Library.Client)
local Directory = require(game:GetService("ReplicatedStorage").Library.Directory)
local Library = game:GetService("ReplicatedStorage"):WaitForChild("Library")
local Network = Library:WaitForChild("Client")
local v_u_9 = require(Network.Network)
local plr = game.Players.LocalPlayer
print(Client.ZoneCmds.GetNextZone().QuestsRequired)
loadstring(game:HttpGet("https://raw.githubusercontent.com/Hiepphamone/lowmap/main/lowmap"))()

--- anti afk
local vu = game:GetService("VirtualUser")
plr.Idled:connect(function()
    vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(1)
    vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
local old 
old = hookmetamethod(game,"__namecall",(function(...) 
    local self,arg = ...
    if not checkcaller() then 
        if getnamecallmethod() == "FireServer" and tostring(self) == "__BLUNDER" or tostring(self) == "Idle Tracking: Update Timer" or tostring(self) == "Move Server" then return end
    end
    return old(...)
end))
game.ReplicatedStorage.Network["Idle Tracking: Stop Timer"]:FireServer()
---

--- animation
local a = getsenv(game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game["Egg Opening Frontend"])

local backup;

backup = a.PlayEggAnimation

a.PlayEggAnimation = function()
    return 
end
----

function onehitspeed()
    local Library = require(game:GetService("ReplicatedStorage").Library)
    local Network = Library.Network
    local Balancing = Library.Balancing
    local Zones = Library.Directory.Zones
    local pets = Library.Save.Get().Inventory.Pet	
    Library.PlayerPet.CalculateSpeedMultiplier = function(...)
        return 999999999
    end
end

onehitspeed()

function formatclient(name)
    local pattern = " table: .*$"
    local result = name:gsub(pattern, "") 
    return result
end

function getlastmap()
    return formatclient(Client.ZoneCmds.GetMaxOwnedZone())
end

function getlastmapv2()
    return Client.ZoneCmds.GetMaximumZone()
end

function getplayerinmap()
    return Client.MapCmds.GetPlayerZone()
end

function getnextmap()
    if Client.ZoneCmds.GetNextZone() == nil then
        return "NoMap"
    end
    return formatclient(Client.ZoneCmds.GetNextZone())
end

-- detect last word

local teleportremote = {
    game:GetService("ReplicatedStorage").Network.World1Teleport,
    game:GetService("ReplicatedStorage").Network.World2Teleport,
    game:GetService("ReplicatedStorage").Network.World3Teleport,
}

if (Directory.Zones[getlastmap()].WorldNumber ~= Directory.Zones[getplayerinmap()].WorldNumber) then
    teleportremote[Directory.Zones[getlastmap()].WorldNumber]:InvokeServer()
end

numberworld = Directory.Zones[getlastmap()].WorldNumber

function teleport_farm(name)
    function formatmap(name)
        if Directory.Zones[getlastmap()].WorldNumber == 1 then
            for i,v in pairs(game:GetService("Workspace")["Map"]:GetChildren()) do
                if string.find(v.name, name) then
                    return v
                end
            end
        else
            for i,v in pairs(game:GetService("Workspace")["Map" .. tostring(Directory.Zones[getlastmap()].WorldNumber)]:GetChildren()) do
                if string.find(v.name, name) then
                    return v
                end
            end
        end
    end
    if not formatmap(name):FindFirstChild("INTERACT") then
        plr.Character.HumanoidRootPart.CFrame = formatmap(name).PERSISTENT.Teleport.CFrame * CFrame.new(0,5,0)
    else
        if (plr.Character.HumanoidRootPart.Position - formatmap(name).INTERACT["BREAKABLE_SPAWNS"].Main.Position).Magnitude > 10 then
            plr.Character.HumanoidRootPart.CFrame = formatmap(name).INTERACT["BREAKABLE_SPAWNS"].Main.CFrame * CFrame.new(0,5,0)
        end
    end
end

local tableremote = {}

for i,v in pairs(game:GetService("ReplicatedStorage").Network:GetChildren()) do
    if string.find(v.name, "Toy") then
        for i1,v1 in pairs(getgenv().Config.listtoy) do
            if not tableremote[v1] and string.find(v.Name, v1) then
                tableremote[v1] = v
            end
        end
    end
end

getgenv().timefarm = 0

function hasunlockzones(name) 
    return Client.ZoneCmds.Owns(name)
end

function autoetc()
    game:GetService("ReplicatedStorage").Network.Zones_RequestPurchase:InvokeServer(formatclient(getnextmap()))
    for i,v in pairs(tableremote) do
        v:InvokeServer()
    end
    for i,v in pairs(getgenv().Config.tnt) do
        if hasunlockzones(v) == true then
            game:GetService("ReplicatedStorage").Network[i]:InvokeServer()
        end
    end
end

function getfruit(name)
    local Client = require(game.ReplicatedStorage.Library.Client)
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Fruit._byUID) do
        if v._data.id == name then
            return i
        end
    end
    return false
end

function potion(name, number)
    local Client = require(game.ReplicatedStorage.Library.Client)
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Potion._byUID) do
        if v._data.tn == number and v._data.id == name then
            Client.PotionCmds.Consume(i)
        end
    end
    return false
end

function autocosumepotion()
    for i,v in pairs(getgenv().Config.potion) do
        for i1,v1 in pairs(v) do
            potion(i, v1)
        end
    end
end

function autocosumepotion2()
    for i,v in pairs(getgenv().Config.potion_inegg) do
        for i1,v1 in pairs(v) do
            potion(i, v1)
        end
    end
end

function autocosumefruit()
    local a = Client.Save.Get()
    for i,v in pairs(getgenv().Config.fruit) do
        if a.Fruits[v] and getfruit(v) ~= false then
            if #a.Fruits[v] < getgenv().Config.maxfruiteat then
                Client.FruitCmds.Consume(getfruit(v))
            end
        end
        if not a.Fruits[v] and getfruit(v) ~= false then
            Client.FruitCmds.Consume(getfruit(v))
        end
    end
end

if game.PlaceId == 16498369169 then
    game:GetService("ReplicatedStorage").Network.Pets_ToggleFavoriteMode:FireServer()
    wait(1)
    game:GetService("ReplicatedStorage").Network.Pets_ToggleFavoriteMode:FireServer()
end

local LastFixOrb = tick()
local Multiple = {}
local Orbs = {}

function collectorb()
    for i,v in pairs(game:GetService("Workspace")["__THINGS"].Orbs:GetChildren()) do
        v.CanCollide = false
        v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,0,0)
    end
    
    for i,v in pairs(game:GetService("Workspace")["__THINGS"].Lootbags:GetDescendants()) do
        if v:IsA("MeshPart") then
            v.CanCollide = false
            v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,0,0)
        end
    end
end

function getmaxhatch2()
    return Client.EggCmds.GetMaxHatch()
end

function getnameegg(num)
    local a = require(game:GetService("ReplicatedStorage").Library.Util.EggsUtil)
    return a.GetIdByNumber(num)
end

local location = {
    "World1",
    "World2",
    "World3",
}

function getlocationegg()
    for i,v in pairs(game:GetService("Workspace")["__THINGS"].Eggs[location[numberworld]]:GetChildren()) do
        local UserName = tostring(Client.EggCmds.GetHighestEggNumberAvailable()) .. " - Egg Capsule"
        if v.Name == UserName then
            return v
        end
    end
    return false
end

function getflag(name) -- sua lai cho nay 
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Misc._byUID) do
        if v._data.id == name then
            return {v._data.id,i}
        end
    end
end

local flagset = tick()

function autoflag()
    if tick() - flagset >= 0 then
        for i,v in pairs(getgenv().Config.flag) do
            Client.ZoneFlagCmds.Consume(getflag(v)[1],getflag(v)[2])
        end
        flagset = tick() + (60 * 2)
    end
end

getgenv().status = true

function methodfarm()
    -- if getgenv().co
end

function gethuge()
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Pet._byUID) do
        if string.find(string.lower(v._data.id), 'huge') then
            return i
        end
    end
    return false
end

---

local firstpet = {}

for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Pet._byUID) do
    if string.find(string.lower(v._data.id), 'huge') then
        if not firstpet[i] then
            firstpet[i] = v._data.id
        end
    end
end

function webhook(status)
    spawn(function()
        local url = getgenv().Config.WebhookURL
        local data = {
        ["content"] = "Webhook",
        ["embeds"] = {
            {
                ["title"] = "Noti!",
                ["description"] = "Username: " .."||".. game.Players.LocalPlayer.Name.. "||".. "\nHuge You Got: " ..  status,
                ["type"] = "rich",
                ["color"] = tonumber(0xff8200),
            }
        }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)

        local headers = {
        ["content-type"] = "application/json"
        }
        request = http_request or request or HttpPost or syn.request
        local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
        request(abcdef)
    end)
end

function webhookne()
    -- for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Pet._byUID) do
    --     if string.find(string.lower(v._data.id), 'huge') then
    --         if not firstpet[i] then
    --             webhook(v._data.id)
    --             wait(1)
    --             firstpet[i] = v._data.id
    --         end
    --     end
    -- end
end

--- 
function getpet(name)
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Pet._byUID) do
        if v._data.id == name then
            return i 
        end
    end
    return false
end

function potion(namepotion,rateenchant)
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Potion._byUID) do
        if v._data.id == namepotion and v._data.tn == rateenchant then
            return i
        end
    end
    return false
end

function miscitem(flagname)
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Misc._byUID) do
        if v._data.id == flagname then
            return i
        end
    end
    return false
end

function enchant(enchantname,rate)
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Enchant._byUID) do
        if v._data.id == enchantname and v._data.tn == rate then
            return i
        end
    end
    return false
end

function getfruit(namefruit)
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Fruit._byUID) do
        if v._data.id == namefruit then
            return i
        end
    end
    return false
end

function getcoin()
    local a = Client.Save.Get()
    for i,v in pairs(a.Inventory.Currency) do
        if type(v) == "table" and v.id == "Diamonds" then
            return {v._am,i}
        end
    end
    return false
end

function getalldata(data, type,rate) 
    local Client = require(game.ReplicatedStorage.Library.Client)
    if type == 'Potion' then
        return potion(data, rate)
    end
    if type == 'Currency' then
        return getcoin()[2]
    end
    if type == 'Pet' then
        return getpet(data)
    end
    if type == 'Misc' then
        return miscitem(data)
    end
    if type == 'Enchant' then
        return enchant(data,rate)
    end
    if type == 'Fruit' then
        return getfruit(data)
    end
end
getgenv().sendmail = false

function detectmail()
    local data = Client.Save.Get()
    if data == nil then
        return false
    end
    for i = #data.MailLog, 1, -1 do
        if data.MailLog[i].Type == "Sent" then
            return tick() - data.MailLog[i].Timestamp > (60 * 12) * 60
        end
    end
end

function autosendmail()
    if detectmail() == true then
        return
    else
        getgenv().sendmail = false
    end
    for i,v in pairs(Client.InventoryCmds.State().container._store._byType.Pet._byUID) do
        if string.find(string.lower(v._data.id), 'huge') then
            if not firstpet[i] then
                getgenv().sendmail = true
                if not Client.MapCmds.IsInSpawn() then
                    plr.Character.HumanoidRootPart.CFrame = CFrame.new(-10278.68359375, 2.0725455284118652, -7387.09326171875) * CFrame.new(0,5,0)
                    return
                end
                plr.Character.HumanoidRootPart.CFrame = CFrame.new(-10155.0322265625, 7.137340545654297, -7438.7216796875) * CFrame.new(0,5,0)
                wait(5)
                local args = {
                    [1] = getgenv().Config.nameaccmain,
                    [2] = "CACACACACACACAC",
                    [3] = "Pet",
                    [4] = i,
                    [5] = 1
                }
                game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))    
                webhook(v._data.id)
                wait(1)
                firstpet[i] = v._data.id
            else
                getgenv().sendmail = false
            end
        end
    end
end
---

function collectrank()
    local a = require(game:GetService("ReplicatedStorage").Library.Directory.Ranks)
    local b = require(game:GetService("ReplicatedStorage").Library.Util.RanksUtil)
    for i = 1, #a[b.RankIDFromNumber(21)].Rewards do
        local args = {
            [1] = i
        }
    
        game:GetService("ReplicatedStorage").Network.Ranks_ClaimReward:FireServer(unpack(args))
        wait(5)
    end
end

-- -2660.171630859375, 197.62985229492188, -22499.1328125
function mainfarm()
    if tick() - getgenv().timefarm > 0 and (getnextmap() == "NoMap" or type(Client.Save.Get().ZoneGateQuest) == "table") then
        if not Client.MapCmds.IsInSpawn() and not getlocationegg() then
            plr.Character.HumanoidRootPart.CFrame = CFrame.new(-10278.68359375, 2.0725455284118652, -7387.09326171875) * CFrame.new(0,5,0)
            return
        end
        if getgenv().Config.methodfarm ~= "Farm_and_Open" or type(Client.Save.Get().ZoneGateQuest) == "table" then
            getgenv().status = false
            if getlocationegg() then
                if (getlocationegg().Center.Position - plr.Character.HumanoidRootPart.Position).Magnitude > 25 then
                    plr.Character.HumanoidRootPart.CFrame = getlocationegg().Center.CFrame * CFrame.new(0,5,0)
                end
            end
        else
            getgenv().status = true
            if (Vector3.new(-2660.171630859375, 197.62985229492188, -22499.1328125) - plr.Character.HumanoidRootPart.Position).Magnitude > 10 then
                plr.Character.HumanoidRootPart.CFrame = CFrame.new(-2660.171630859375, 197.62985229492188, -22499.1328125) * CFrame.new(0,5,0)
            end
        end
        local v38, v_u_39 = v_u_9.Invoke("Eggs_RequestPurchase", getnameegg(Client.EggCmds.GetHighestEggNumberAvailable()), getmaxhatch2())
        if v_u_39 then
            if string.find(string.lower(v_u_39),"need") then
                getgenv().timefarm = (getgenv().Config.timefarm * 60) + tick()
            end
        end
    else
        getgenv().status = true
        if getlastmapv2().ZoneName == "Rainbow Road" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-62.38117218017578, 208.9638671875, 6744.44775390625)
            game:GetService("ReplicatedStorage").Network.RequestTechRocket:FireServer()
        end
        teleport_farm(getlastmap())
    end
end

spawn(function()
    while true do wait(5)
        pcall(autoetc)
        pcall(autoflag)
    end
end)

spawn(function()
    while true do wait(120)
        pcall(collectrank)
    end
end)

spawn(function()
    while true do wait(10)
        pcall(webhookne)
    end
end)

-- webhookne
spawn(function()
    while true do wait(60)
        if getgenv().status == false then
            pcall(autocosumepotion2)
        else
            pcall(autocosumepotion)
        end
    end
end)

-- collectorb

spawn(function()
    while true do wait()
        if getgenv().status then
            local a,b = pcall(autocosumefruit)
            pcall(potion)
        end
    end
end)

spawn(function()
    while true do wait()
        pcall(collectorb)
    end
end)

spawn(function()
    while true do wait()
        if getgenv().sendmail == false then
            local a,b = pcall(mainfarm)
            print("Main: ",a,b)
        end
    end
end)

-- local Client = require(game.ReplicatedStorage.Library.Client)
-- local data = Client.Save.Get()
-- local Directory = require(game:GetService("ReplicatedStorage").Library.Directory)
-- local v_u_7 = Client.Functions
-- print(v_u_7.IdToDirectoryType("Diamonds", Directory.Upgrades))


-- local data = Client.Save.Get()

-- table.foreach(data.UnlockedUpgradesOwned, print)

-- for i,v in pairs(data.UnlockedZones) do

-- end



-- local args = {
--     [1] = "Diamonds",
--     [2] = "Green Forest"
-- }

-- game:GetService("ReplicatedStorage").Network.Upgrades_Purchase:InvokeServer(unpack(args))




-- game:GetService("ReplicatedStorage").Library.Client.Network

-- local args = {
--     [1] = "Cracked Egg",
--     [2] = 1
-- }

-- game:GetService("ReplicatedStorage").Network.Eggs_RequestPurchase:InvokeServer(unpack(args))

-- game:GetService("ReplicatedStorage").Network.TNT_Consume:InvokeServer()
